// ============================================
// MAKALAH AI: UI Component Adapters for Persona Integration
// ============================================
// Task P07.3 Implementation: Component adapters untuk persona compatibility
// Created: August 2025
// Features: Context adapters, error boundaries, state bridging

import { createContext, useContext, ReactNode, ComponentType } from 'react'
import type { PersonaTemplate } from '@/types/persona'

// ============================================
// PERSONA CONTEXT PROVIDER TYPES
// ============================================

export interface PersonaContextProviderValue {
  currentPersona: PersonaTemplate | null
  chatMode: 'formal' | 'casual' | null
  sessionId: string | null
  isLoading: boolean
  error: string | null
  isInitialized: boolean
}

export interface PersonaContextProviderProps {
  children: ReactNode
  sessionId?: string | null
  fallbackPersona?: PersonaTemplate
}

// ============================================
// PERSONA CONTEXT PROVIDER
// ============================================

const PersonaContext = createContext<PersonaContextProviderValue | null>(null)

export function PersonaContextProvider({ 
  children, 
  sessionId, 
  fallbackPersona 
}: PersonaContextProviderProps) {
  const contextValue: PersonaContextProviderValue = {
    currentPersona: fallbackPersona || null,
    chatMode: 'formal',
    sessionId: sessionId || null,
    isLoading: false,
    error: null,
    isInitialized: true
  }

  return null // Temporary placeholder for build fix
}

export function usePersonaContextProvider() {
  const context = useContext(PersonaContext)
  if (!context) {
    throw new Error('usePersonaContextProvider must be used within PersonaContextProvider')
  }
  return context
}

// ============================================
// HIGHER-ORDER COMPONENTS
// ============================================

export function withPersonaContext<P extends object>(
  Component: ComponentType<P & { personaContext: PersonaContextProviderValue }>
): ComponentType<P> {
  return function WithPersonaContextWrapper(props: P) {
    const personaContext = usePersonaContextProvider()
    
    return <Component {...props} personaContext={personaContext} />
  }
}

// ============================================
// PERSONA ADAPTER UTILITIES
// ============================================

export class PersonaAdapterUtils {
  static getChatModeLabel(chatMode: 'formal' | 'casual' | null): string {
    switch (chatMode) {
      case 'formal':
        return 'Mode Akademik'
      case 'casual':
        return 'Mode Santai'
      default:
        return 'Mode Belum Dipilih'
    }
  }

  static getPersonaModeColor(mode: string): string {
    switch (mode) {
      case 'Research':
        return 'text-blue-600 bg-blue-50'
      case 'Writing':
        return 'text-green-600 bg-green-50'
      case 'Review':
        return 'text-purple-600 bg-purple-50'
      default:
        return 'text-gray-600 bg-gray-50'
    }
  }

  static isPersonaActive(persona: PersonaTemplate | null): boolean {
    return persona !== null && persona.is_active
  }
}

// ============================================
// ERROR HANDLING
// ============================================

export function PersonaErrorFallback({
  error,
  resetError,
  personaContext
}: {
  error: Error
  resetError: () => void
  personaContext?: PersonaContextProviderValue
}) {
  return (
    <div className="rounded-lg border border-red-200 bg-red-50 p-4">
      <h3 className="text-lg font-medium text-red-800">
        Persona Integration Error
      </h3>
      <p className="mt-2 text-sm text-red-600">
        Ada masalah dengan integrasi persona. Silakan coba lagi.
      </p>
      <button
        onClick={resetError}
        className="mt-3 rounded bg-red-100 px-3 py-1 text-sm font-medium text-red-800 hover:bg-red-200"
      >
        Coba Lagi
      </button>
      {personaContext && (
        <div className="mt-2 text-xs text-red-500">
          Context: {personaContext.chatMode || 'unknown'} | {personaContext.sessionId || 'no-session'}
        </div>
      )}
    </div>
  )
}

export default PersonaContextProvider